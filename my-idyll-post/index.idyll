[meta title:"My Idyll Post" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"Service-level agreements"
  authorLink:"https://idyll-lang.org"
  background:"#003399"
  color:"#ffffff"
   /]

**Service level agreements (SLAs)** help organizations complete work 
in a timely manner and enforce on-time performance by establishing 
a deadline for work completion. These obligations can range from 
informal response-time promises to negotiated contracts.


[var name:"state" value:0 /]

[Scroller currentStep:state]

  [Graphic className:"d3-component-container"]
    [CustomD3Component className:"d3-component" state:`state+1` /]
  [/Graphic]

  [Step]

    ## *Service-level intervals*:

    For each **service-level agreement (SLA)**, there are four 
    configurable intervals of time that standardize how long 
    you have to perform a task:
* start
* goal
* deadline
* past deadline

    The goal and deadline intervals are calculated from the start 
    interval. The past deadline interval can be repeated as many 
    times as desired as it is an additional opportunity to escalate 
    or take action when a task is late. The passed deadline interval 
    is calculated from the end of the deadline interval.

    in addition to [hyperlinks](https://idyll-lang.org) and images:

    ![quill](static/images/quill.svg)

    ```
    ![quill](static/images/quill.svg)
    ```
  [/Step]

  [Step]
  ## Time sheet example:

  For example, consider a company that uses a timesheet 
  application where an employee can submit a timesheet for 
  a managerâ€™s review. The company wants to apply an SLA on 
  the approval task for the manager to make sure that the 
  timesheets are approved quickly. 

  The start interval begins the moment the employee submits 
  their timesheet and it is sent to the manager for approval. 
  The goal interval is when the company would like for that 
  time sheet to be approved by the manager, such as 48 hours. 
  The deadline interval is when the company requires the timesheet 
  to be approved by, such as 72 hours. The approval is considered 
  late after the deadline interval passes. The past deadline 
  interval can be repeated multiple times.

  The company decides to set a past deadline interval to occur 
  every hour after the deadline and to repeat three times 
  (so notify 3 times). The company decides to increase urgency 
  by 20 when the goal interval occurs, by 30 when the deadline 
  interval elapses, and by 15 each time the past deadline interval 
  elapses. (Show in diagram, use sketch in notebook to help, note 
  that it would be great to have interactive diagram or video here)

  [/Step]

  [Step]
  ## Escalation actions:

  At the start of each service level interval, you can configure 
  one or more of the following four actions to occur: 
* Increase the urgency level of the task 
* Notify the manager
* Reassign the task to another party
* Auto-approve the task
  [/Step]

  [Step]
  ## Urgency

  The urgency value 
  is used to prioritize the task over tasks with lower urgency 
  values. Higher priority tasks are listed first in the User 
  Portal in Pega. Tasks start with an urgency level of 10 
  by default, but can range from 10-100.
  [/Step]


  [Step]
    ## Components

    Components can be embedded using a bracket syntax:

    ```
    [Range /]
    ```

    and can contain nested content:

    ```
    [Equation]e = mc^{2}[/Equation]
    ```

    Components accept properties:

    ```
    [Range value:x min:0 max:1 /]
    ```

    that can be bound to variables to achieve interactivity (more in next section).


    A variety of components are included by default. See [all the available components](https://idyll-lang.org/docs/components/). You can also use any html tag, for example: `[div] A div! [/div]`.

    To create your own, add it to the `components/` folder. There are examples of how to use Idyll with React and D3 based components already included.

  [/Step]

  [Step]
    ## Interactivity

    Here is how you can instantiate a variable and bind it to a component:

    [var name:"exampleVar" value:5 /]

    [Range min:0 max:10 value:exampleVar /]
    [Display value:exampleVar /]

    ```
    [var name:"exampleVar" value:5 /]

    [Range min:0 max:10 value:exampleVar /]
    [Display value:exampleVar /]
    ```
  [/Step]

[/Scroller]

[Scroller]

  [Step]

    ##Scroller

    The `Scroller` component is used to create scroll-based presentations. It can be used to create scrollytelling articles similar to this.
    It takes a property `currentStep` which is updated when the user scrolls to a different step.

    A persistent graphic may also provided using the `Graphic` component in order to create visualizations.

  [/Step]

  [Step]

    ## Learn More

    To learn more see the documentation at [https://idyll-lang.org/docs/](https://idyll-lang.org/docs/),
    join our [chatroom](https://gitter.im/idyll-lang/Lobby), or see the project on [GitHub](https://github.com/idyll-lang/idyll).
  [hr /]

  [/Step]

[/Scroller]

[br/]
# Technical Details

## Installation

- Make sure you have `idyll` installed (`npm i -g idyll`).
- Clone this repo and run `npm install`.

## Developing a post locally

Run `idyll`.

## Building a post for production

Run `idyll build`. The output will appear in the top-level `build` folder. To change the output location, change the `output` option in `package.json`.

## Deploying

Make sure your post has been built, then deploy the docs folder via any static hosting service.

## Dependencies

You can install custom dependencies by running `npm install <package-name> --save`. Note that any collaborators will also need download the package locally by running `npm install` after pulling the changes.
